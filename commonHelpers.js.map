{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst input = document.querySelector('#datetime-picker');\nconst btnStart = document.querySelector('button[data-start]');\nconst day = document.querySelector('span[data-days]');\nconst hour = document.querySelector('span[data-hours]');\nconst minute = document.querySelector('span[data-minutes]');\nconst second = document.querySelector('span[data-seconds]');\n\nbtnStart.disabled = true;\nlet userSelectedDate = '';\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n\n    onClose(selectedDates) {\n    if (selectedDates[0] < new Date()) {\n        iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n    });\n    \n    btnStart.disabled = true;\n    } else {\n        userSelectedDate = selectedDates[0];\n        btnStart.disabled = false;\n        iziToast.success({\n        title: 'OK',\n        message: 'You can press \"Start\"!',\n    });\n    }\n},\n};\n\nflatpickr(input, options);\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nbtnStart.addEventListener('click', startTimer);\n\nfunction addLeadingZero(value) {\n    return value.toString().padStart(2, '0');\n}\n\nfunction startTimer() {\n    const selectedDateTime = userSelectedDate.getTime(); \n    const intervalId = setInterval(() => {\n    const currentDate = new Date(); \n    const diff = selectedDateTime - currentDate;\n    const { days, hours, minutes, seconds } = convertMs(diff);\n\n    if (diff <= 0) {\n        clearInterval(intervalId);\n\n    } else {\n        day.textContent = addLeadingZero(days);\n        hour.textContent = addLeadingZero(hours);\n        minute.textContent = addLeadingZero(minutes);\n        second.textContent = addLeadingZero(seconds);\n    }\n}, 1000);\n}"],"names":["input","btnStart","day","hour","minute","second","userSelectedDate","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","startTimer","addLeadingZero","value","selectedDateTime","intervalId","currentDate","diff"],"mappings":"qIAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAM,SAAS,cAAc,iBAAiB,EAC9CC,EAAO,SAAS,cAAc,kBAAkB,EAChDC,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAS,SAAS,cAAc,oBAAoB,EAE1DJ,EAAS,SAAW,GACpB,IAAIK,EAAmB,GAEvB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACnBA,EAAc,GAAK,IAAI,MACvBC,EAAS,MAAM,CACf,MAAO,QACP,QAAS,oCACjB,CAAK,EAEDR,EAAS,SAAW,KAEhBK,EAAmBE,EAAc,GACjCP,EAAS,SAAW,GACpBQ,EAAS,QAAQ,CACjB,MAAO,KACP,QAAS,wBACjB,CAAK,EAEL,CACA,EAEAC,EAAUV,EAAOO,CAAO,EAExB,SAASI,EAAUC,EAAI,CAMnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEAf,EAAS,iBAAiB,QAASgB,CAAU,EAE7C,SAASC,EAAeC,EAAO,CAC3B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CAC3C,CAEA,SAASF,GAAa,CAClB,MAAMG,EAAmBd,EAAiB,UACpCe,EAAa,YAAY,IAAM,CACrC,MAAMC,EAAc,IAAI,KAClBC,EAAOH,EAAmBE,EAC1B,CAAE,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUY,CAAI,EAEpDA,GAAQ,EACR,cAAcF,CAAU,GAGxBnB,EAAI,YAAcgB,EAAeL,CAAI,EACrCV,EAAK,YAAce,EAAeJ,CAAK,EACvCV,EAAO,YAAcc,EAAeH,CAAO,EAC3CV,EAAO,YAAca,EAAeF,CAAO,EAEnD,EAAG,GAAI,CACP"}